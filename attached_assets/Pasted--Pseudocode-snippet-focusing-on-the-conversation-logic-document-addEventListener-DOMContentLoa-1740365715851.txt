// Pseudocode / snippet focusing on the conversation logic

document.addEventListener('DOMContentLoaded', function() {
  const chatMessages = document.getElementById('chatMessages');
  const messageInput = document.getElementById('messageInput');
  const chatForm = document.getElementById('chatForm');

  // Unique user ID
  const userId = 'user_' + Math.random().toString(36).substr(2, 9);

  chatForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    const userMessage = messageInput.value.trim();
    if (!userMessage) return;

    // 1) Display user message
    addMessage(userMessage, true);
    messageInput.value = '';

    // 2) Request AI's response (2 itinerary options)
    const loadingMsg = showLoading();
    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMessage, user_id: userId })
      });
      const data = await res.json();
      loadingMsg.remove();

      if (data.status === 'success') {
        // This data contains data.alternatives (2 options)
        addMessage(data); 
      } else {
        addMessage('Error: ' + data.message, false, true);
      }
    } catch (err) {
      loadingMsg.remove();
      addMessage('Error connecting: ' + err.message, false, true);
    }
  });

  // Called when we receive data with { alternatives: [...] }
  function addMessage(content, isUser = false, isError = false) {
    const msgDiv = document.createElement('div');
    msgDiv.className = `message ${isUser ? 'user' : 'system'} ${isError ? 'error' : ''}`;

    if (content.alternatives) {
      // We have 2 itinerary options
      msgDiv.innerHTML = `<div><strong>Here are two options for you:</strong></div>`;
      content.alternatives.forEach((option, idx) => {
        const optDiv = createOptionElement(option, idx + 1);
        msgDiv.appendChild(optDiv);
      });
    } else {
      // Just plain text or error messages
      msgDiv.textContent = typeof content === 'string' ? content : JSON.stringify(content);
    }

    chatMessages.appendChild(msgDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function createOptionElement(optionData, index) {
    // Each option is an itinerary or suggestion
    const container = document.createElement('div');
    container.className = 'response-option';

    // Display the option content
    container.innerHTML = `<h5>Option ${index}:</h5>`;
    const contentDiv = document.createElement('div');
    contentDiv.innerHTML = optionData.content; // Already in Markdown or plain text
    container.appendChild(contentDiv);

    // "Select This Option" button
    const selectBtn = document.createElement('button');
    selectBtn.className = 'btn btn-primary btn-sm';
    selectBtn.textContent = 'Select This Option';
    container.appendChild(selectBtn);

    selectBtn.addEventListener('click', () => {
      // Hide all other options
      const otherOptions = document.querySelectorAll('.response-option');
      otherOptions.forEach(opt => {
        if (opt !== container) opt.style.display = 'none';
      });

      // Mark this option as selected
      selectBtn.disabled = true;
      selectBtn.textContent = 'Selected!';

      // Show "Refine Plan" or "Confirm Plan"
      showRefineOrConfirmButtons(optionData.content);
    });

    return container;
  }

  function showRefineOrConfirmButtons(selectedItinerary) {
    const refineBtn = document.createElement('button');
    refineBtn.className = 'btn btn-secondary btn-sm ms-2';
    refineBtn.textContent = 'Refine Plan';

    const confirmBtn = document.createElement('button');
    confirmBtn.className = 'btn btn-success btn-sm ms-2';
    confirmBtn.textContent = 'Confirm Plan';

    const container = document.createElement('div');
    container.className = 'mt-3';
    container.appendChild(refineBtn);
    container.appendChild(confirmBtn);

    chatMessages.appendChild(container);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    // Handle refine
    refineBtn.addEventListener('click', () => {
      // Prompt user for changes
      const refinement = prompt('What changes would you like to make to this plan?');
      if (!refinement) return;

      // Send that refinement to the AI (just call the same chat endpoint)
      addMessage(refinement, true);
      refinePlan(selectedItinerary, refinement);
    });

    // Handle confirm
    confirmBtn.addEventListener('click', () => {
      confirmPlan(selectedItinerary);
    });
  }

  async function refinePlan(currentItinerary, userChanges) {
    // Re-run the AI with a new query, e.g. "Revise itinerary with these changes: ..."

    const loadingMsg = showLoading();
    try {
      const refineReq = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Please revise the plan with these changes:\n${userChanges}\n\nExisting plan:\n${currentItinerary}`,
          user_id: userId
        })
      });
      const refineData = await refineReq.json();
      loadingMsg.remove();

      if (refineData.status === 'success') {
        // We'll get again 2 alternatives or 1? We can ask the AI to produce just 1 refined plan
        // For simplicity, let's say it returns 2 again:
        addMessage(refineData);
      } else {
        addMessage('Error refining plan: ' + refineData.message, false, true);
      }
    } catch (err) {
      loadingMsg.remove();
      addMessage('Error refining plan: ' + err.message, false, true);
    }
  }

  async function confirmPlan(finalItinerary) {
    // 1) Save final plan to Airtable (the /api/itinerary/save route)
    // 2) Then parse itinerary and let user push to calendar
    try {
      const confirmReq = await fetch('/api/itinerary/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: userId,
          selected_itinerary: finalItinerary
        })
      });
      const confirmData = await confirmReq.json();

      if (confirmData.status === 'success') {
        // Saved in Airtable. Now show "Add to Calendar" button
        const calendarBtn = document.createElement('button');
        calendarBtn.className = 'btn btn-outline-primary btn-sm mt-2';
        calendarBtn.textContent = 'Add to Google Calendar';

        calendarBtn.addEventListener('click', async () => {
          // Check if user is authenticated
          const authCheck = await fetch('/api/calendar/status');
          const authData = await authCheck.json();
          if (!authData.authenticated) {
            window.location.href = '/api/calendar/auth';
          } else {
            // If user is already authenticated, create events
            createCalendarEventsFromItinerary(finalItinerary);
          }
        });

        addMessage('Plan confirmed and saved! You can now add it to your calendar:');
        chatMessages.appendChild(calendarBtn);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      } else {
        addMessage('Failed to confirm plan: ' + confirmData.message, false, true);
      }
    } catch (err) {
      addMessage('Error confirming plan: ' + err.message, false, true);
    }
  }

  // The rest of your existing code remains the same:
  // - createCalendarEventsFromItinerary()
  // - showLoading(), addMessage() for errors, etc.
});
